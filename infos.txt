INITIALISATION LIST: 
    Sample::Sample(char p1, int p2) : a1(p1), a2(p2){
        std::cout << this->a1 << "\n";
    }

CONVENTION: FOR THE PRIVATE  USE _variableName
/**************************************************************************************/
    HEAP VS STACK
==> It allocates or deallocates the memory automatically as soon as the
corresponding method completes its execution.
==> Stack memory allocation is considered safer as compared to heap memory
allocation because the data stored can only be access by owner thread.
==> Memory allocation and deallocation is faster as compared to Heap-memory allocation.
==> Stack-memory has less storage space as compared to Heap-memory.
/**************************************************************************************/

/**************************************************************************************/
    POINTER VS REFERENCE C++
==> A pointer in C++ is a variable that holds the memory address of another variable.
==> A reference is an alias for an already existing variable. Once a reference is
initialized to a variable, it cannot be changed to refer to another variable. Hence,
a reference is similar to a const pointer.
/**************************************************************************************/

/**************************************************************************************/
    DEFAULT constructor
Whenever we define one or more non-default constructors( with parameters ) for a class,
a default constructor( without parameters ) should also be explicitly defined as the
compiler will not provide a default constructor in this case
/**************************************************************************************/

/**************************************************************************************/
ofstream: Stream class to write on files
ifstream: Stream class to read from files
/**************************************************************************************/

/**************************************************************************************/
    COPY_CONSTRUCTOR
- a new instance is created
- with the = assignment operator there is an update of the current instance

/**************************************************************************************/
    THE FOOR POLYMORPHISM IN C++
Note:When the function is made virtual, C++ determines which function is to be invoked at
    the runtime based on the type of the object pointed by the base class pointer.

1.Subtype Polymorphism (Runtime Polymorphism).
2.Ad-hoc Polymorphism (Overloading)
/**************************************************************************************/
    ABSTRACT CLASSES AND INTERFACES
- virtual function = 0 ==> it can't be implemented (pure method) so we can't instanciat the class
 (abstract class)

/**************************************************************************************/
When overloaded as a member function, a << b is interpreted as a.operator<<(b),
so it only takes one explicit parameter (with this as a hidden parameter).

Since this requires that the overload be part of the class used as the left-hand operand,
it's not useful with normal ostreams and such. It would require that your overload be part
of the ostream class, not part of your class. Since you're not allowed to modify ostream,
you can't do that. That leaves only the global overload as an alternative.
/**************************************************************************************/

/**************************************************************************************/
    DEEP COPY VS SHALLOW COPY
==> Deep copy stores copies of the object’s value.
==> shallow Copy stores the references of objects to the original memory address
==> Deep copy doesn’t reflect changes made to the new/copied object in the original object.
/**************************************************************************************/
/**************************************************************************************/
    TEMPLATE
==> The simple idea for a template is to pass data type as a parameter so that we don’t
need to write the same code for different data types
/**************************************************************************************/
NOTE:
    (class TreeItem;)==> It is a forward declaration,

/**************************************************************************************/
    EXCEPTION
try {
  // Block of code to try
  throw exception; // Throw an exception when a problem arise
}
catch () {
  // Block of code to handle errors
}
/**************************************************************************************/


